

- ==
- !==
- > : have special meaning so use for comparison with datatypes other than string:
	-> -ge: greater than or equal to 
        -> -ne: not equal to 
        -> -lt: less than 
	-> -eq: equal to
 	-> -gt: greator than 
- <


- if while needs a command which returns an exit code and based on exit code they will further execute thier block of code.

- we can use test condition or [ condition ] to return the exit code which we can use in conditional statements.

- testing condition:
  =================
 
  -> test (condition):
     --------------
     eg:
     -- 
     => test a1 == a2 
  
  
  test options:
  =============
   SYNTAX: test -[zn] string  
   ------ 
	1. -z: check if value of variable is empty or not if empty then returns 0 else 1 
        2. -n: check if value of variable is empty then return 1 else 0
    

   FILE OPTIONS:
   ------------
    SYNTAX: test -[xwsredf] filename
    ------
      1. -x : if file is granted execute permission
      2. -w : if file is granted write permission
      3. -s : if file exists and is a socket
      4. -r : if file can be read
      5. -e : if file exists or not
      6. -d : if file exists and is a directory
      7. -f : if file exists and is a file

  -> [ 1 -le 2 ]  : this square bracket returns exit code     
 

IF CONDITION:
============

=> if is designed in such a way which checks for the exit code of the command and if the exit code is 0 it will run its block of code.

SYNTAX:
------

if condition
  then 
    ....
fi


if condition
  then 
    ....
else
    ....
fi   

 


eg:
--
create user only if not present:
-------------------------------
db.csv
-----
user1
user2
user3

check_for_user.sh:
-----------------

for user in $(cat db.csv)
  do
    if id $user &> /dev/null  # don't want the output to be printed on screen
      then
         echo '$user already present'  
    else
       if useradd $user 
         then
           echo 'new user created: $user successfully'
      else
         echo 'user: $user not created'
      fi 
    fi
done
-----------*******************************************-----------------------


- AND , OR:
  --------

  command1 && command2 : if command1 runs, then run command2  


  command1 || command2 : any one 


  "command1;command2" : run both command irrespective of one other 





